"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.outgoingRequestHook = void 0;
var _http = _interopRequireDefault(require("http"));
var _https = _interopRequireDefault(require("https"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /*
                                                                                                                                                                                                                                                                                                                                                                                           * Copyright (c) 2022, Salesforce, Inc.
                                                                                                                                                                                                                                                                                                                                                                                           * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                           * SPDX-License-Identifier: BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                           * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                           */
let HTTP_AGENT, HTTPS_AGENT;
const KEEPALIVE_AGENT_OPTIONS = {
  keepAlive: true
};

/**
 * Returns the http and https agent singletons.
 *
 * @private
 * @returns {object} -
 */
const getKeepAliveAgents = () => {
  if (!HTTP_AGENT || !HTTPS_AGENT) {
    HTTP_AGENT = new _http.default.Agent(KEEPALIVE_AGENT_OPTIONS);
    HTTPS_AGENT = new _https.default.Agent(KEEPALIVE_AGENT_OPTIONS);
  }
  return {
    httpAgent: HTTP_AGENT,
    httpsAgent: HTTPS_AGENT
  };
};
const outgoingRequestHook = (wrapped, options) => {
  return function () {
    // Get the app hostname. If we can't, then just pass
    // the call through to the wrapped function. We'll also
    // do that if there's no access key.
    const accessKey = process.env.X_MOBIFY_ACCESS_KEY;
    const {
      appHostname,
      proxyKeepAliveAgent
    } = options || {};
    if (!(appHostname && accessKey)) {
      return wrapped.apply(this, arguments);
    }

    // request and get can be called with (options[, callback])
    // or (url[, options][, callback]).
    let workingUrl = '';
    let workingOptions;
    let workingCallback;
    const args = arguments;

    // The options will be in the first 'object' argument
    for (let i = 0; i < args.length; i++) {
      const arg = args[i];
      switch (typeof arg) {
        case 'object':
          {
            // Assume this arg is the options
            // We want to clone any options to avoid modifying
            // the original object.
            workingOptions = _objectSpread({}, arg);
            break;
          }
        case 'string':
          {
            // Assume this arg is the URL
            workingUrl = arg;
            break;
          }
        default:
          // Assume this is the callback
          workingCallback = arg;
          break;
      }
    }
    if (!workingOptions) {
      // No options were supplied, so we add them
      workingOptions = {
        headers: {}
      };
    }

    // We need to identify loopback requests: requests that are
    // to the appHost (irrespective of protocol).
    // The workingUrl value may be partial (the docs are very
    // imprecise on permitted values). We check everywhere that
    // might give us what we need. If this is not a loopback
    // request, we just pass it through unmodified.
    const isLoopback =
    // Either hostname or host are allowed in the options. The docs
    // say that 'hostname' is an alias for 'host', but that's not
    // exactly true - host can include a port but hostname doesn't
    // always. So we need to compare both.
    workingOptions.host === appHostname || workingOptions.hostname === appHostname || workingUrl && workingUrl.includes(`//${appHostname}`);
    if (!isLoopback) {
      return wrapped.apply(this, arguments);
    }

    // We must inject the 'x-mobify-access-key' header into the
    // request.
    workingOptions.headers = workingOptions.headers ? _objectSpread({}, workingOptions.headers) : {};

    // Inject the access key.
    workingOptions.headers['x-mobify-access-key'] = accessKey;

    // Create and add keep-alive agent to options for loop-back connection.
    if (proxyKeepAliveAgent) {
      var _workingOptions, _workingOptions2, _workingOptions2$head, _workingOptions3, _workingOptions3$head;
      const {
        httpAgent,
        httpsAgent
      } = getKeepAliveAgents();

      // Add default agent to global connection reuse.
      workingOptions.agent = workingUrl.startsWith('http:') || ((_workingOptions = workingOptions) === null || _workingOptions === void 0 ? void 0 : _workingOptions.protocol) === 'http:' ? httpAgent : httpsAgent;

      // `node-fetch` and potentially other libraries add connection: close headers
      // remove them to keep the connection alive. NOTE: There are variations in
      // whether or not the connection header is upper or lower case, so handle both.
      (_workingOptions2 = workingOptions) === null || _workingOptions2 === void 0 ? true : (_workingOptions2$head = _workingOptions2.headers) === null || _workingOptions2$head === void 0 ? true : delete _workingOptions2$head.connection;
      (_workingOptions3 = workingOptions) === null || _workingOptions3 === void 0 ? true : (_workingOptions3$head = _workingOptions3.headers) === null || _workingOptions3$head === void 0 ? true : delete _workingOptions3$head.Connection;
    }

    // Build the args, omitting any undefined values
    const workingArgs = [workingUrl, workingOptions, workingCallback].filter(arg => !!arg);
    return wrapped.apply(this, workingArgs);
  };
};
exports.outgoingRequestHook = outgoingRequestHook;