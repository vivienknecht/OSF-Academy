"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EXT_OVERRIDES_DIR_NO_SLASH = exports.EXT_OVERRIDES_DIR = exports.EXT_EXTENDS_WIN = exports.EXT_EXTENDS = exports.EXT_EXTENDABLE = exports.DEPS_TO_DEDUPE = void 0;
var _path = _interopRequireWildcard(require("path"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _webpack = _interopRequireDefault(require("webpack"));
var _webpackNotifier = _interopRequireDefault(require("webpack-notifier"));
var _copyWebpackPlugin = _interopRequireDefault(require("copy-webpack-plugin"));
var _webpackBundleAnalyzer = require("webpack-bundle-analyzer");
var _webpackPlugin = _interopRequireDefault(require("@loadable/webpack-plugin"));
var _reactRefreshWebpackPlugin = _interopRequireDefault(require("@pmmmwh/react-refresh-webpack-plugin"));
var _speedMeasureWebpackPlugin = _interopRequireDefault(require("speed-measure-webpack-plugin"));
var _overridesPlugin = _interopRequireDefault(require("./overrides-plugin"));
var _plugins = require("./plugins");
var _configNames = require("./config-names");
var _pkg$ccExtensibility, _pkg$ccExtensibility2, _pkg$ccExtensibility3, _pkg$ccExtensibility4, _pkg$ccExtensibility5, _pkg$ccExtensibility6, _pkg$ccExtensibility7, _pkg$ccExtensibility8, _pkg$ccExtensibility9, _pkg$ccExtensibility10, _pkg$ccExtensibility11, _pkg$ccExtensibility12;
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint-env node */
// For more information on these settings, see https://webpack.js.org/configuration
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const projectDir = process.cwd();
const pkg = _fsExtra.default.readJsonSync((0, _path.resolve)(projectDir, 'package.json'));
const buildDir = process.env.PWA_KIT_BUILD_DIR ? (0, _path.resolve)(process.env.PWA_KIT_BUILD_DIR) : (0, _path.resolve)(projectDir, 'build');
const production = 'production';
const development = 'development';
const analyzeBundle = process.env.MOBIFY_ANALYZE === 'true';
const mode = process.env.NODE_ENV === production ? production : development;
const DEBUG = mode !== production && process.env.DEBUG === 'true';
const CI = process.env.CI;
const disableHMR = process.env.HMR === 'false';
if ([production, development].indexOf(mode) < 0) {
  throw new Error(`Invalid mode "${mode}"`);
}

// for API convenience, add the leading slash if missing
const EXT_OVERRIDES_DIR = typeof (pkg === null || pkg === void 0 ? void 0 : (_pkg$ccExtensibility = pkg.ccExtensibility) === null || _pkg$ccExtensibility === void 0 ? void 0 : _pkg$ccExtensibility.overridesDir) === 'string' && !(pkg !== null && pkg !== void 0 && (_pkg$ccExtensibility2 = pkg.ccExtensibility) !== null && _pkg$ccExtensibility2 !== void 0 && (_pkg$ccExtensibility3 = _pkg$ccExtensibility2.overridesDir) !== null && _pkg$ccExtensibility3 !== void 0 && _pkg$ccExtensibility3.match(/(^\/|^\\)/)) ? '/' + (pkg === null || pkg === void 0 ? void 0 : (_pkg$ccExtensibility4 = pkg.ccExtensibility) === null || _pkg$ccExtensibility4 === void 0 ? void 0 : (_pkg$ccExtensibility5 = _pkg$ccExtensibility4.overridesDir) === null || _pkg$ccExtensibility5 === void 0 ? void 0 : _pkg$ccExtensibility5.replace(/\\/g, '/')) : pkg !== null && pkg !== void 0 && (_pkg$ccExtensibility6 = pkg.ccExtensibility) !== null && _pkg$ccExtensibility6 !== void 0 && _pkg$ccExtensibility6.overridesDir ? pkg === null || pkg === void 0 ? void 0 : (_pkg$ccExtensibility7 = pkg.ccExtensibility) === null || _pkg$ccExtensibility7 === void 0 ? void 0 : (_pkg$ccExtensibility8 = _pkg$ccExtensibility7.overridesDir) === null || _pkg$ccExtensibility8 === void 0 ? void 0 : _pkg$ccExtensibility8.replace(/\\/g, '/') : '';
exports.EXT_OVERRIDES_DIR = EXT_OVERRIDES_DIR;
const EXT_OVERRIDES_DIR_NO_SLASH = EXT_OVERRIDES_DIR === null || EXT_OVERRIDES_DIR === void 0 ? void 0 : EXT_OVERRIDES_DIR.replace(/^\//, '');
exports.EXT_OVERRIDES_DIR_NO_SLASH = EXT_OVERRIDES_DIR_NO_SLASH;
const EXT_EXTENDS = pkg === null || pkg === void 0 ? void 0 : (_pkg$ccExtensibility9 = pkg.ccExtensibility) === null || _pkg$ccExtensibility9 === void 0 ? void 0 : _pkg$ccExtensibility9.extends;
exports.EXT_EXTENDS = EXT_EXTENDS;
const EXT_EXTENDS_WIN = pkg === null || pkg === void 0 ? void 0 : (_pkg$ccExtensibility10 = pkg.ccExtensibility) === null || _pkg$ccExtensibility10 === void 0 ? void 0 : (_pkg$ccExtensibility11 = _pkg$ccExtensibility10.extends) === null || _pkg$ccExtensibility11 === void 0 ? void 0 : _pkg$ccExtensibility11.replace('/', '\\');
exports.EXT_EXTENDS_WIN = EXT_EXTENDS_WIN;
const EXT_EXTENDABLE = pkg === null || pkg === void 0 ? void 0 : (_pkg$ccExtensibility12 = pkg.ccExtensibility) === null || _pkg$ccExtensibility12 === void 0 ? void 0 : _pkg$ccExtensibility12.extendable;

// TODO: can these be handled in package.json as peerDependencies?
// https://salesforce-internal.slack.com/archives/C0DKK1FJS/p1672939909212589

// due to to how the sdks work and the potential of these npm deps coming
// from multiple places, we need to force them to one place where they're found
exports.EXT_EXTENDABLE = EXT_EXTENDABLE;
const DEPS_TO_DEDUPE = ['babel-runtime', '@tanstack/react-query', '@loadable/component', '@loadable/server', '@loadable/webpack-plugin', 'svg-sprite-loader', 'react', 'react-router-dom', 'react-dom', 'react-helmet', 'webpack-hot-middleware', 'react-intl', '@chakra-ui/icons', '@chakra-ui/react', '@chakra-ui/skip-nav', '@emotion/react'];
exports.DEPS_TO_DEDUPE = DEPS_TO_DEDUPE;
if (EXT_EXTENDABLE && EXT_EXTENDS) {
  const extendsAsArr = Array.isArray(EXT_EXTENDS) ? EXT_EXTENDS : [EXT_EXTENDS];
  const conflicts = extendsAsArr.filter(x => EXT_EXTENDABLE === null || EXT_EXTENDABLE === void 0 ? void 0 : EXT_EXTENDABLE.includes(x));
  if (conflicts !== null && conflicts !== void 0 && conflicts.length) {
    throw new Error(`Dependencies in 'extendable' and 'extends' cannot overlap, fix these: ${conflicts.join(', ')}"`);
  }
}
const getBundleAnalyzerPlugin = (name = 'report', pluginOptions) => new _webpackBundleAnalyzer.BundleAnalyzerPlugin(_objectSpread({
  analyzerMode: 'static',
  defaultSizes: 'gzip',
  openAnalyzer: CI !== 'true',
  generateStatsFile: true,
  reportFilename: `${name}.html`,
  reportTitle: `${name} bundle analysis result`,
  statsFilename: `${name}-analyzer-stats.json`
}, pluginOptions));
const entryPointExists = segments => {
  for (let ext of ['.js', '.jsx', '.ts', '.tsx']) {
    const primary = (0, _path.resolve)(projectDir, ...segments) + ext;
    const override = EXT_OVERRIDES_DIR ? (0, _path.resolve)(projectDir, EXT_OVERRIDES_DIR_NO_SLASH, ...segments) + ext : null;
    if (_fsExtra.default.existsSync(primary) || override && _fsExtra.default.existsSync(override)) {
      return true;
    }
  }
  return false;
};
const getAppEntryPoint = () => {
  return (0, _path.resolve)('./', EXT_OVERRIDES_DIR_NO_SLASH, 'app', 'main');
};
const findDepInStack = pkg => {
  // Look for the SDK node_modules in two places because in CI,
  // pwa-kit-dev is published under a 'dist' directory, which
  // changes this file's location relative to the package root.
  const candidates = [(0, _path.resolve)(projectDir, 'node_modules', pkg), (0, _path.resolve)(__dirname, '..', '..', 'node_modules', pkg), (0, _path.resolve)(__dirname, '..', '..', '..', 'node_modules', pkg)];
  let candidate;
  for (candidate of candidates) {
    if (_fsExtra.default.existsSync(candidate)) {
      return candidate;
    }
  }
  return candidate;
};
const baseConfig = target => {
  if (!['web', 'node'].includes(target)) {
    throw Error(`The value "${target}" is not a supported webpack target`);
  }
  class Builder {
    constructor() {
      this.config = _objectSpread(_objectSpread({
        watchOptions: {
          aggregateTimeout: 1000
        },
        target,
        mode
      }, target === 'node' ? {
        ignoreWarnings: [
        // These can be ignored fairly safely for node targets, where
        // bundle size is not super critical. Express generates this warning,
        // because it uses dynamic require() calls, which cause Webpack to
        // bundle the whole library.
        /Critical dependency: the request of a dependency is an expression/]
      } : {}), {}, {
        infrastructureLogging: {
          level: 'error'
        },
        stats: {
          all: false,
          modules: false,
          errors: true,
          warnings: true,
          moduleTrace: true,
          errorDetails: true,
          colors: true,
          assets: false,
          excludeAssets: [/.*img\/.*/, /.*svg\/.*/, /.*json\/.*/, /.*static\/.*/]
        },
        optimization: {
          minimize: mode === production
        },
        output: {
          publicPath: '',
          path: buildDir
        },
        resolve: _objectSpread(_objectSpread({}, EXT_EXTENDS && EXT_OVERRIDES_DIR ? {
          plugins: [new _overridesPlugin.default({
            extends: [EXT_EXTENDS],
            overridesDir: EXT_OVERRIDES_DIR,
            projectDir: process.cwd()
          })]
        } : {}), {}, {
          extensions: ['.ts', '.tsx', '.js', '.jsx', '.json'],
          alias: _objectSpread(_objectSpread(_objectSpread({}, _extends(...DEPS_TO_DEDUPE.map(dep => ({
            [dep]: findDepInStack(dep)
          })))), EXT_OVERRIDES_DIR && EXT_EXTENDS ? _extends(
          // NOTE: when an array of `extends` dirs are accepted, don't coerce here
          ...[EXT_EXTENDS].map(extendTarget => ({
            [extendTarget]: _path.default.resolve(projectDir, 'node_modules', ...extendTarget.split('/'))
          }))) : {}), EXT_EXTENDABLE ? _extends(...[EXT_EXTENDABLE].map(item => ({
            [item]: _path.default.resolve(projectDir)
          }))) : {})
        }, target === 'web' ? {
          fallback: {
            crypto: false
          }
        } : {}),
        plugins: [new _webpack.default.DefinePlugin({
          DEBUG,
          NODE_ENV: `'${process.env.NODE_ENV}'`,
          WEBPACK_TARGET: `'${target}'`,
          ['global.GENTLY']: false
        }), mode === development && new _webpack.default.NoEmitOnErrorsPlugin(), (0, _plugins.sdkReplacementPlugin)(),
        // Don't chunk if it's a node target – faster Lambda startup.
        target === 'node' && new _webpack.default.optimize.LimitChunkCountPlugin({
          maxChunks: 1
        })].filter(Boolean),
        module: {
          rules: [ruleForBabelLoader(), target === 'node' && {
            test: /\.svg$/,
            loader: findDepInStack('svg-sprite-loader')
          }, target === 'web' && {
            test: /\.svg$/,
            loader: findDepInStack('ignore-loader')
          }, {
            test: /\.html$/,
            exclude: /node_modules/,
            use: {
              loader: findDepInStack('html-loader')
            }
          }].filter(Boolean)
        }
      });
    }
    extend(callback) {
      this.config = callback(this.config);
      return this;
    }
    build() {
      // Clean up temporary properties, to be compatible with the config schema
      this.config.module.rules.filter(rule => rule.id).forEach(rule => delete rule.id);
      return this.config;
    }
  }
  return new Builder();
};
const withChunking = config => {
  return _objectSpread(_objectSpread({}, config), {}, {
    output: _objectSpread(_objectSpread({}, config.output), {}, {
      filename: '[name].js',
      chunkFilename: '[name].js' // Support chunking with @loadable/components
    }),

    optimization: {
      minimize: mode === production,
      splitChunks: {
        cacheGroups: {
          vendor: {
            // Three scenarios that we'd like to chunk vendor.js:
            // 1. The package is in node_modules
            // 2. The package is one of the monorepo packages.
            //    This is for local development to ensure the bundle
            //    composition is the same as a production build
            // 3. If extending another template, don't include the
            //    baseline route files in vendor.js
            test: module => {
              var _module$context, _module$context2, _module$context2$matc;
              if (EXT_EXTENDS && EXT_OVERRIDES_DIR && module !== null && module !== void 0 && (_module$context = module.context) !== null && _module$context !== void 0 && _module$context.includes(`${_path.default.sep}${_path.default.sep === '/' ? EXT_EXTENDS : EXT_EXTENDS_WIN}${_path.default.sep}`)) {
                return false;
              }
              return module === null || module === void 0 ? void 0 : (_module$context2 = module.context) === null || _module$context2 === void 0 ? void 0 : (_module$context2$matc = _module$context2.match) === null || _module$context2$matc === void 0 ? void 0 : _module$context2$matc.call(_module$context2, /(node_modules)|(packages\/(.*)dist)/);
            },
            name: 'vendor',
            chunks: 'all'
          }
        }
      }
    }
  });
};
const staticFolderCopyPlugin = new _copyWebpackPlugin.default({
  patterns: [{
    from: _path.default.resolve(`${EXT_OVERRIDES_DIR ? EXT_OVERRIDES_DIR_NO_SLASH + '/' : ''}app/static`).replace(/\\/g, '/'),
    to: `static/`,
    noErrorOnMissing: true
  }]
});
const ruleForBabelLoader = babelPlugins => {
  return _objectSpread(_objectSpread({
    id: 'babel-loader',
    test: /(\.js(x?)|\.ts(x?))$/
  }, EXT_OVERRIDES_DIR && EXT_EXTENDS ?
  // TODO: handle for array here when that's supported
  {
    exclude: new RegExp(`${_path.default.sep}node_modules(?!${_path.default.sep}${_path.default.sep === '/' ? EXT_EXTENDS : EXT_EXTENDS_WIN})`)
  } : {
    exclude: /node_modules/
  }), {}, {
    use: [{
      loader: findDepInStack('babel-loader'),
      options: _objectSpread({
        rootMode: 'upward',
        cacheDirectory: true
      }, babelPlugins ? {
        plugins: babelPlugins
      } : {})
    }]
  });
};
const findAndReplace = (array = [], findFn = () => {}, replacement) => {
  const clone = array.slice(0);
  const index = clone.findIndex(findFn);
  if (index === -1) {
    return array;
  }
  clone.splice(index, 1, replacement);
  return clone;
};
const enableReactRefresh = config => {
  if (mode !== development || disableHMR) {
    return config;
  }
  const newRule = ruleForBabelLoader([require.resolve('react-refresh/babel')]);
  const rules = findAndReplace(config.module.rules, rule => rule.id === 'babel-loader', newRule);
  return _objectSpread(_objectSpread({}, config), {}, {
    module: _objectSpread(_objectSpread({}, config.module), {}, {
      rules
    }),
    entry: _objectSpread(_objectSpread({}, config.entry), {}, {
      main: ['webpack-hot-middleware/client?path=/__mrt/hmr', getAppEntryPoint()]
    }),
    plugins: [...config.plugins, new _webpack.default.HotModuleReplacementPlugin(), new _reactRefreshWebpackPlugin.default({
      overlay: false
    })],
    output: _objectSpread(_objectSpread({}, config.output), {}, {
      // Setting this so that *.hot-update.json requests are resolving
      publicPath: '/mobify/bundle/development/'
    })
  });
};
const client = entryPointExists(['app', 'main']) && baseConfig('web').extend(withChunking).extend(config => {
  return _objectSpread(_objectSpread({}, config), {}, {
    // Must be named "client". See - https://www.npmjs.com/package/webpack-hot-server-middleware#usage
    name: _configNames.CLIENT,
    // use source map to make debugging easier
    devtool: mode === development ? 'source-map' : false,
    entry: {
      main: getAppEntryPoint()
    },
    plugins: [...config.plugins, new _webpackPlugin.default({
      writeToDisk: true
    }), analyzeBundle && getBundleAnalyzerPlugin(_configNames.CLIENT)].filter(Boolean),
    // Hide the performance hints, since we already have a similar `bundlesize` check in `template-retail-react-app` package
    performance: {
      hints: false
    }
  });
}).extend(enableReactRefresh).build();
const optional = (name, path) => {
  return _fsExtra.default.existsSync(path) ? {
    [name]: path
  } : {};
};
const clientOptional = baseConfig('web').extend(config => {
  return _objectSpread(_objectSpread({}, config), {}, {
    name: _configNames.CLIENT_OPTIONAL,
    entry: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, optional('loader', (0, _path.resolve)(projectDir, EXT_OVERRIDES_DIR, 'app', 'loader.js'))), optional('worker', (0, _path.resolve)(projectDir, 'worker', 'main.js'))), optional('core-polyfill', (0, _path.resolve)(projectDir, 'node_modules', 'core-js'))), optional('fetch-polyfill', (0, _path.resolve)(projectDir, 'node_modules', 'whatwg-fetch'))),
    // use source map to make debugging easier
    devtool: mode === development ? 'source-map' : false,
    plugins: [...config.plugins, analyzeBundle && getBundleAnalyzerPlugin(_configNames.CLIENT_OPTIONAL)].filter(Boolean)
  });
}).build();
const renderer = _fsExtra.default.existsSync((0, _path.resolve)(projectDir, 'node_modules', '@salesforce', 'pwa-kit-react-sdk')) && baseConfig('node').extend(config => {
  return _objectSpread(_objectSpread({}, config), {}, {
    // Must be named "server". See - https://www.npmjs.com/package/webpack-hot-server-middleware#usage
    name: _configNames.SERVER,
    entry: '@salesforce/pwa-kit-react-sdk/ssr/server/react-rendering.js',
    // use eval-source-map for server-side debugging
    devtool: mode === development ? 'eval-source-map' : false,
    output: {
      path: buildDir,
      // We want to split the build on local development to reduce memory usage.
      // It is required to have a single entry point for the remote server.
      // See pwa-kit-runtime/ssr/server/build-remote-server.js render method.
      filename: mode === development ? '[name]-server.js' : 'server-renderer.js',
      libraryTarget: 'commonjs2'
    },
    plugins: [...config.plugins, staticFolderCopyPlugin,
    // Keep this on the slowest-to-build item - the server-side bundle.
    new _webpackNotifier.default({
      title: `PWA Kit Project: ${pkg.name}`,
      excludeWarnings: true,
      skipFirstNotification: true
    }), analyzeBundle && getBundleAnalyzerPlugin('server-renderer')].filter(Boolean)
  });
}).build();
const ssr = (() => {
  // Only compile the ssr file when we're building for prod.
  if (mode === production) {
    return baseConfig('node').extend(config => {
      return _objectSpread(_objectSpread({}, config), {}, {
        // Must *not* be named "server". See - https://www.npmjs.com/package/webpack-hot-server-middleware#usage
        name: _configNames.SSR,
        entry: `.${EXT_OVERRIDES_DIR}/app/ssr.js`,
        output: {
          path: buildDir,
          filename: 'ssr.js',
          libraryTarget: 'commonjs2'
        },
        plugins: [...config.plugins, staticFolderCopyPlugin, analyzeBundle && getBundleAnalyzerPlugin(_configNames.SSR)].filter(Boolean)
      });
    }).build();
  } else {
    return undefined;
  }
})();
const requestProcessor = entryPointExists(['app', 'request-processor']) && baseConfig('node').extend(config => {
  return _objectSpread(_objectSpread({}, config), {}, {
    name: _configNames.REQUEST_PROCESSOR,
    // entry: './app/request-processor.js',
    entry: `.${EXT_OVERRIDES_DIR}/app/request-processor.js`,
    output: {
      path: buildDir,
      filename: 'request-processor.js',
      libraryTarget: 'commonjs2'
    },
    // use eval-source-map for server-side debugging
    devtool: mode === development ? 'eval-source-map' : false,
    plugins: [...config.plugins, analyzeBundle && getBundleAnalyzerPlugin(_configNames.REQUEST_PROCESSOR)].filter(Boolean)
  });
}).build();
module.exports = [client, ssr, renderer, clientOptional, requestProcessor].filter(Boolean).map(config => {
  return new _speedMeasureWebpackPlugin.default({
    disable: !process.env.MEASURE
  }).wrap(config);
});