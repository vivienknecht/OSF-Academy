"use strict";

var _url = require("./url");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /*
                                                                                                                                                                                                                                                                                                                                                                                           * Copyright (c) 2021, salesforce.com, inc.
                                                                                                                                                                                                                                                                                                                                                                                           * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                           * SPDX-License-Identifier: BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                           * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                           */
describe('getAppOrigin', () => {
  const OLD_ENV = process.env;
  const OLD_WINDOW = global.window;
  const TEST_ORIGIN = 'https://www.example.com';
  beforeEach(() => {
    jest.resetModules();
    process.env = _objectSpread({}, OLD_ENV);
  });
  afterEach(() => {
    process.env = OLD_ENV;
    global.window = OLD_WINDOW;
  });
  test('returns `process.env.APP_ORIGIN` when on server', () => {
    // Simulate being on the server by deleting the window.
    delete global.window;

    // Simulate starting the app server by simply setting the `APP_ORIGIN`
    process.env.APP_ORIGIN = TEST_ORIGIN;
    expect((0, _url.getAppOrigin)()).toBe(TEST_ORIGIN);
  });
  test('returns `window.location.origin` when on client', () => {
    expect((0, _url.getAppOrigin)()).toBe('http://localhost');
  });
  test('throws error when APP_ORIGIN is not defined on server.', () => {
    // Simulate being on the server by deleting the window.
    delete global.window;

    // Simulate app server not being initialized.
    process.env.APP_ORIGIN = undefined;
    expect(() => {
      (0, _url.getAppOrigin)();
    }).toThrow();
  });
});