"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ServerContext = exports.CorrelationIdProvider = exports.CorrelationIdContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

const CorrelationIdContext = /*#__PURE__*/_react.default.createContext();
exports.CorrelationIdContext = CorrelationIdContext;
const ServerContext = /*#__PURE__*/_react.default.createContext();

/**
 * This provider initializes the correlation id,
 * and will generate a new id whenever there is a location change
 * @private
 * @param children
 * @param correlationId - default correlation id
 * @param resetOnPageChange - a boolean to indicate if it needs to generate a new id when navigating to a new page
 */
exports.ServerContext = ServerContext;
const CorrelationIdProvider = ({
  children,
  correlationId,
  resetOnPageChange = true
}) => {
  const _correlationIdFn = typeof correlationId === 'function' && correlationId;
  const _correlationId = typeof correlationId !== 'function' && correlationId;
  if (resetOnPageChange && !_correlationIdFn) {
    console.warn('correlationId needs to be a function returning a uuid string when resetOnPageChange is true');
  }
  const [id, setId] = _react.default.useState(_correlationId || _correlationIdFn());
  const location = (0, _reactRouterDom.useLocation)();
  const isFirstRun = (0, _react.useRef)(true);
  (0, _react.useEffect)(() => {
    // this hook only runs on client-side
    // don't run this on first render
    if (isFirstRun.current) {
      isFirstRun.current = false;
      return;
    }
    if (resetOnPageChange && _correlationIdFn) {
      // NOTE: the function needs to be an uuid v4.
      const newId = _correlationIdFn();
      setId(newId);
    }
  }, [location.pathname]);
  return /*#__PURE__*/_react.default.createElement(CorrelationIdContext.Provider, {
    value: {
      correlationId: id
    }
  }, children);
};
exports.CorrelationIdProvider = CorrelationIdProvider;
CorrelationIdProvider.propTypes = {
  children: _propTypes.default.element.isRequired,
  resetOnPageChange: _propTypes.default.bool,
  correlationId: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]).isRequired,
  location: _propTypes.default.object
};