"use strict";

var _reactQuery = require("@tanstack/react-query");
var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
var _reactRouterDom = require("react-router-dom");
var _index = _interopRequireDefault(require("./index"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; } /*
                                                                                                                                                                                                                                                                                                                                                                                                       * Copyright (c) 2023, Salesforce, Inc.
                                                                                                                                                                                                                                                                                                                                                                                                       * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                       * SPDX-License-Identifier: BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                                       * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                                       */
jest.useFakeTimers();
const referrerURL = 'some-url';
jest.mock('react-router-dom', () => {
  const replace = jest.fn();
  return {
    useHistory: jest.fn(() => ({
      replace
    })),
    useLocation: jest.fn(() => ({
      search: `?referrer=${referrerURL}`
    }))
  };
});
jest.mock('@tanstack/react-query', () => {
  const invalidateQueries = jest.fn();
  return {
    useQueryClient: jest.fn(() => ({
      invalidateQueries
    }))
  };
});
test('renders a loading spinner initially', () => {
  (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_index.default, null));
  expect(_react.screen.getByTestId('loading-spinner')).toBeInTheDocument();
});
test('wait for react-query cache to be invalidated', /*#__PURE__*/_asyncToGenerator(function* () {
  (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_index.default, null));
  yield (0, _react.waitFor)(() => {
    expect((0, _reactQuery.useQueryClient)().invalidateQueries).toHaveBeenCalled();
  });
}));
test('a project not using react-query', /*#__PURE__*/_asyncToGenerator(function* () {
  // If customer project does not use react-query, calling useQueryClient would throw an error
  _reactQuery.useQueryClient.mockImplementationOnce(() => {
    throw new Error();
  });
  (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_index.default, null));
  jest.runAllTimers();
  yield (0, _react.waitFor)(() => {
    // Expect to still continue despite the project not using react-query,
    // specifically continue to navigate back to the referrer.
    expect((0, _reactRouterDom.useHistory)().replace).toHaveBeenCalledWith(referrerURL);
  });
}));
test('wait for soft navigation to the referrer', /*#__PURE__*/_asyncToGenerator(function* () {
  (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_index.default, null));
  jest.runAllTimers();
  yield (0, _react.waitFor)(() => {
    expect((0, _reactRouterDom.useHistory)().replace).toHaveBeenCalledWith(referrerURL);
  });
}));
test('navigate to homepage if `referrer` search param cannot be found in the page url', /*#__PURE__*/_asyncToGenerator(function* () {
  jest.spyOn(console, 'warn');
  _reactRouterDom.useLocation.mockImplementationOnce(() => ({
    search: ''
  }));
  (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_index.default, null));
  jest.runAllTimers();
  yield (0, _react.waitFor)(() => {
    expect(console.warn).toHaveBeenCalled();
    expect((0, _reactRouterDom.useHistory)().replace).toHaveBeenCalledWith('/');
  });
}));