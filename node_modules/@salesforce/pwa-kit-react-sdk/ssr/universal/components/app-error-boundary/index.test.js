"use strict";

var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _index = require("./index");
var errors = _interopRequireWildcard(require("../../errors"));
var _sinon = _interopRequireDefault(require("sinon"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; } /*
                                                                                                                                                                                                                                                                                                                                                                                                       * Copyright (c) 2021, salesforce.com, inc.
                                                                                                                                                                                                                                                                                                                                                                                                       * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                       * SPDX-License-Identifier: BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                                       * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                                       */
describe('AppErrorBoundary', () => {
  const cases = [{
    content: 'test 1',
    errorFactory: () => new errors.HTTPNotFound('Not found'),
    afterErrorAssertions: () => {
      expect(_react2.screen.getByText('Error Status: 404')).toBeInTheDocument();
      expect(_react2.screen.getByText('Not found')).toBeInTheDocument();
    },
    variation: 'SDK HTTP Errors'
  }, {
    content: 'test 2',
    errorFactory: () => new Error('Some other error'),
    afterErrorAssertions: function () {
      var _ref = _asyncToGenerator(function* () {
        expect(_react2.screen.getByText('Error Status: 500')).toBeInTheDocument();
        expect(_react2.screen.getByText('Error: Some other error')).toBeInTheDocument();
      });
      return function afterErrorAssertions() {
        return _ref.apply(this, arguments);
      };
    }(),
    variation: 'Generic Javascript Errors'
  }, {
    content: 'test 3',
    errorFactory: () => 'Some string error',
    afterErrorAssertions: () => {
      expect(_react2.screen.getByText('Error Status: 500')).toBeInTheDocument();
      expect(_react2.screen.getByText('Some string error')).toBeInTheDocument();
    },
    variation: 'Error Strings'
  }, {
    content: 'test 4',
    errorFactory: () => undefined,
    afterErrorAssertions: () => {
      expect(_react2.screen.getByText('Error Status: 500')).toBeInTheDocument();
      expect(document.querySelector('pre').innerHTML).toBe('');
    },
    variation: 'Check for message value to be empty if undefined'
  }];
  cases.forEach(({
    content,
    errorFactory,
    afterErrorAssertions,
    variation
  }) => {
    test(`Displays errors correctly (variation: ${variation})`, () => {
      const ref = /*#__PURE__*/_react.default.createRef();
      (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_index.AppErrorBoundaryWithoutRouter, {
        ref: ref
      }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, content)));
      expect(_react2.screen.getByText(content)).toBeInTheDocument();
      (0, _react2.act)(() => {
        ref.current.onGetPropsError(errorFactory());
      });
      expect(_react2.screen.queryByText(content)).toBeNull();
      afterErrorAssertions();
    });
    test(`Watches history, when provided (variation: ${variation})`, () => {
      const history = {
        listen: _sinon.default.stub().returns(_sinon.default.stub())
      };
      const ref = /*#__PURE__*/_react.default.createRef();
      (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_index.AppErrorBoundaryWithoutRouter, {
        ref: ref,
        history: history
      }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, content)));
      expect(_react2.screen.getByText(content)).toBeInTheDocument();
      (0, _react2.act)(() => {
        ref.current.onGetPropsError(errorFactory());
      });
      expect(_react2.screen.queryByText(content)).toBeNull();
      afterErrorAssertions();
      expect(history.listen.called).toBe(true);
    });
  });
  test(`Display Error message from getDerivedStateFromError`, () => {
    const error = new Error('test');
    const result = _index.AppErrorBoundaryWithoutRouter.getDerivedStateFromError(error);
    expect(result.error.message).toEqual(error.toString());
  });
  test(`componentWillUnmount unlistens to history`, () => {
    const unlisten = jest.fn();
    const history = {
      listen: jest.fn().mockReturnValue(unlisten)
    };
    const wrapper = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_index.AppErrorBoundaryWithoutRouter, {
      history: history
    }, "test"));
    wrapper.unmount();
    expect(unlisten).toHaveBeenCalled();
  });
});