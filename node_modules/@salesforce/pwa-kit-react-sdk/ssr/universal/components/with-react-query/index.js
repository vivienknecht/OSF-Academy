"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withReactQuery = void 0;
var _react = _interopRequireDefault(require("react"));
var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));
var _reactSsrPrepass = _interopRequireDefault(require("react-ssr-prepass"));
var _reactQuery = require("@tanstack/react-query");
var _fetchStrategy = require("../fetch-strategy");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; } /*
                                                                                                                                                                                                                                                                                                                                                                                                       * Copyright (c) 2022, Salesforce, Inc.
                                                                                                                                                                                                                                                                                                                                                                                                       * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                       * SPDX-License-Identifier: BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                                       * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                                       */
const STATE_KEY = '__reactQuery';

/**
 * A HoC for adding React Query support to your application.
 *
 * @param {React.ReactElement} Wrapped The component to be wrapped
 * @param {Object} options
 * @param {Object} options.queryClientConfig The react query client configuration object to be used.
 *
 * @returns {React.ReactElement}
 */
const withReactQuery = (Wrapped, options = {}) => {
  const isServerSide = typeof window === 'undefined';
  /* istanbul ignore next */
  const wrappedComponentName = Wrapped.displayName || Wrapped.name;
  const queryClientConfig = options.queryClientConfig;

  /**
   * @private
   */
  class WithReactQuery extends _fetchStrategy.FetchStrategy {
    render() {
      var _window$__PRELOADED_S;
      this.props.locals.__queryClient = this.props.locals.__queryClient || new _reactQuery.QueryClient(queryClientConfig);
      return /*#__PURE__*/_react.default.createElement(_reactQuery.QueryClientProvider, {
        client: this.props.locals.__queryClient
      }, /*#__PURE__*/_react.default.createElement(_reactQuery.Hydrate, {
        state: isServerSide ? {} : (_window$__PRELOADED_S = window.__PRELOADED_STATE__) === null || _window$__PRELOADED_S === void 0 ? void 0 : _window$__PRELOADED_S[STATE_KEY]
      }, /*#__PURE__*/_react.default.createElement(Wrapped, this.props)));
    }

    /**
     * @private
     */
    static doInitAppState({
      res,
      appJSX
    }) {
      return _asyncToGenerator(function* () {
        const queryClient = res.locals.__queryClient = res.locals.__queryClient || new _reactQuery.QueryClient(queryClientConfig);

        // Use `ssrPrepass` to collect all uses of `useQuery`.
        yield (0, _reactSsrPrepass.default)(appJSX);
        const queryCache = queryClient.getQueryCache();
        const queries = queryCache.getAll().filter(q => q.options.enabled !== false);
        yield Promise.all(queries.map(q =>
        // If there's an error in this fetch, react-query will log the error
        q.fetch().catch(() => {
          // On our end, simply catch any error and move on to the next query
        })));
        return {
          [STATE_KEY]: (0, _reactQuery.dehydrate)(queryClient)
        };
      })();
    }

    /**
     * @private
     */
    static getInitializers() {
      var _Wrapped$getInitializ;
      return [WithReactQuery.doInitAppState, ...(((_Wrapped$getInitializ = Wrapped.getInitializers) === null || _Wrapped$getInitializ === void 0 ? void 0 : _Wrapped$getInitializ.call(Wrapped)) ?? [])];
    }

    /**
     * @private
     */
    static getHOCsInUse() {
      var _Wrapped$getHOCsInUse;
      return [withReactQuery, ...(((_Wrapped$getHOCsInUse = Wrapped.getHOCsInUse) === null || _Wrapped$getHOCsInUse === void 0 ? void 0 : _Wrapped$getHOCsInUse.call(Wrapped)) ?? [])];
    }
  }
  WithReactQuery.displayName = `withReactQuery(${wrappedComponentName})`;
  const exclude = {
    doInitAppState: true,
    getInitializers: true,
    initAppState: true,
    getHOCsInUse: true
  };
  (0, _hoistNonReactStatics.default)(WithReactQuery, Wrapped, exclude);
  return WithReactQuery;
};
exports.withReactQuery = withReactQuery;