"use strict";

var utils = _interopRequireWildcard(require("./utils"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

describe('getProxyConfigs (client-side)', () => {
  const configs = [{
    foo: 'bar'
  }];
  beforeEach(() => {
    global.Progressive = {
      ssrOptions: {
        proxyConfigs: configs
      }
    };
  });
  afterEach(() => {
    delete global.Progressive;
  });
  test('should return proxy configs set on window.Progressive', () => {
    expect(utils.getProxyConfigs()).toEqual(configs);
  });
});
describe('getAssetUrl (client-side)', () => {
  beforeEach(() => {
    global.Progressive = {
      buildOrigin: 'test.com'
    };
  });
  afterEach(() => {
    delete global.Progressive;
  });
  test('should return build origin when path is undefined', () => {
    expect(utils.getAssetUrl()).toBe('test.com');
  });
  test('should return origin + path', () => {
    expect(utils.getAssetUrl('/path')).toBe('test.com/path');
  });
});