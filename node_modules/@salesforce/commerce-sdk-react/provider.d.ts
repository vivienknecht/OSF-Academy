import React, { ReactElement } from 'react';
import { ShopperBasketsTypes } from 'commerce-sdk-isomorphic';
import Auth from './auth';
import { ApiClientConfigParams, ApiClients } from './hooks/types';
export interface CommerceApiProviderProps extends ApiClientConfigParams {
    children: React.ReactNode;
    proxy: string;
    locale: string;
    currency: string;
    redirectURI: string;
    fetchOptions?: ShopperBasketsTypes.FetchOptions;
    headers?: Record<string, string>;
    fetchedToken?: string;
    OCAPISessionsURL?: string;
}
/**
 * @internal
 */
export declare const CommerceApiContext: React.Context<ApiClients>;
/**
 * @internal
 */
export declare const ConfigContext: React.Context<Omit<CommerceApiProviderProps, "children">>;
/**
 * @internal
 */
export declare const AuthContext: React.Context<Auth>;
/**
 * Initialize a set of Commerce API clients and make it available to all of descendant components
 *
 * @group Components
 *
 * @example
 * ```js
    import {CommerceApiProvider} from '@salesforce/commerce-sdk-react'


    const App = ({children}) => {
        return (
                <CommerceApiProvider
                    clientId="12345678-1234-1234-1234-123412341234"
                    organizationId="f_ecom_aaaa_001"
                    proxy="localhost:3000/mobify/proxy/api"
                    redirectURI="localhost:3000/callback"
                    siteId="RefArch"
                    shortCode="12345678"
                    locale="en-US"
                    currency="USD"
                >
                    {children}
                </CommerceApiProvider>
        )
    }

    export default App
 * ```
 *
 * @returns Provider to wrap your app with
 */
declare const CommerceApiProvider: (props: CommerceApiProviderProps) => ReactElement;
export default CommerceApiProvider;
//# sourceMappingURL=provider.d.ts.map