"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSearchSuggestions = exports.useProductSearch = void 0;
var _useCommerceApi = _interopRequireDefault(require("../useCommerceApi"));
var _useQuery = require("../useQuery");
var _utils = require("../utils");
var queryKeyHelpers = _interopRequireWildcard(require("./queryKeyHelpers"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; } /*
                                                                                                                                                                                                                                                                                                                                                                                                       * Copyright (c) 2023, Salesforce, Inc.
                                                                                                                                                                                                                                                                                                                                                                                                       * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                       * SPDX-License-Identifier: BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                                       * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                                       */
/**
 * Provides keyword and refinement search functionality for products.
 *
 * Only returns the product ID, link, and name in the product search hit.
 * The search result contains only products that are online and assigned to site catalog.
 * @group ShopperSearch
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Search `productSearch` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-search?meta=productSearch| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shoppersearch.shoppersearch-1.html#productsearch | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
const useProductSearch = (apiOptions, queryOptions = {}) => {
  const {
    shopperSearch: client
  } = (0, _useCommerceApi.default)();
  const methodName = 'productSearch';
  const requiredParameters = ['organizationId', 'siteId'];

  // Parameters can be set in `apiOptions` or `client.clientConfig`;
  // we must merge them in order to generate the correct query key.
  const netOptions = (0, _utils.omitNullableParameters)((0, _utils.mergeOptions)(client, apiOptions));
  const queryKey = queryKeyHelpers[methodName].queryKey(netOptions.parameters);
  // We don't use `netOptions` here because we manipulate the options in `useQuery`.
  const method = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* (options) {
      return yield client[methodName](options);
    });
    return function method(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  // For some reason, if we don't explicitly set these generic parameters, the inferred type for
  // `Data` sometimes, but not always, includes `Response`, which is incorrect. I don't know why.
  return (0, _useQuery.useQuery)(netOptions, queryOptions, {
    method,
    queryKey,
    requiredParameters
  });
};
/**
 * Provides keyword search functionality for products, categories, and brands suggestions.
 *
 * Returns suggested products, suggested categories, and suggested brands for the given search phrase.
 * @group ShopperSearch
 * @category Query
 * @parameter apiOptions - Options to pass through to `commerce-sdk-isomorphic`, with `null` accepted for unset API parameters.
 * @parameter queryOptions - TanStack Query query options, with `enabled` by default set to check that all required API parameters have been set.
 * @returns A TanStack Query query hook with data from the Shopper Search `getSearchSuggestions` endpoint.
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-search?meta=getSearchSuggestions| Salesforce Developer Center} for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/shoppersearch.shoppersearch-1.html#getsearchsuggestions | `commerce-sdk-isomorphic` documentation} for more information on the parameters and returned data type.
 * @see {@link https://tanstack.com/query/latest/docs/react/reference/useQuery | TanStack Query `useQuery` reference} for more information about the return value.
 */
exports.useProductSearch = useProductSearch;
const useSearchSuggestions = (apiOptions, queryOptions = {}) => {
  const {
    shopperSearch: client
  } = (0, _useCommerceApi.default)();
  const methodName = 'getSearchSuggestions';
  const requiredParameters = ['organizationId', 'siteId', 'q'];

  // Parameters can be set in `apiOptions` or `client.clientConfig`;
  // we must merge them in order to generate the correct query key.
  const netOptions = (0, _utils.omitNullableParameters)((0, _utils.mergeOptions)(client, apiOptions));
  const queryKey = queryKeyHelpers[methodName].queryKey(netOptions.parameters);
  // We don't use `netOptions` here because we manipulate the options in `useQuery`.
  const method = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(function* (options) {
      return yield client[methodName](options);
    });
    return function method(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  // For some reason, if we don't explicitly set these generic parameters, the inferred type for
  // `Data` sometimes, but not always, includes `Response`, which is incorrect. I don't know why.
  return (0, _useQuery.useQuery)(netOptions, queryOptions, {
    method,
    queryKey,
    requiredParameters
  });
};
exports.useSearchSuggestions = useSearchSuggestions;