"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMutation = void 0;
var _reactQuery = require("@tanstack/react-query");
var _useAuthorizationHeader = require("./useAuthorizationHeader");
var _useCustomerId = _interopRequireDefault(require("./useCustomerId"));
var _utils = require("./utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

/**
 * Helper for mutation hooks, contains most of the logic in order to keep individual hooks small.
 * @param hookConfig - Config values that vary per API endpoint
 * @internal
 */
const useMutation = hookConfig => {
  const queryClient = (0, _reactQuery.useQueryClient)();
  const customerId = (0, _useCustomerId.default)();
  const authenticatedMethod = (0, _useAuthorizationHeader.useAuthorizationHeader)(hookConfig.method);
  return (0, _reactQuery.useMutation)(authenticatedMethod, {
    onSuccess(data, options) {
      // commerce-sdk-isomorphic merges `clientConfig` and `options` under the hood,
      // so we also need to do that to get the "net" options that are actually sent to SCAPI.
      const netOptions = (0, _utils.mergeOptions)(hookConfig.client, options);
      const cacheUpdates = hookConfig.getCacheUpdates(customerId, netOptions, data);
      (0, _utils.updateCache)(queryClient, cacheUpdates, data);
    }
  });
};
exports.useMutation = useMutation;