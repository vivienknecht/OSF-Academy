"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _useAuthContext = _interopRequireDefault(require("./useAuthContext"));
var _useLocalStorage = _interopRequireDefault(require("./useLocalStorage"));
var _useConfig = _interopRequireDefault(require("./useConfig"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

const onClient = typeof window !== 'undefined';
/**
 * A hook to return customer auth type.
 *
 * Customer type can have 3 values:
 * - null
 * - guest
 * - registered
 *
 * During initialization, type is null. And it is possible that
 * isGuest and isRegistered to both be false.
 *
 * @group Helpers
 * @category Shopper Authentication
 *
 */
const useCustomerType = () => {
  const config = (0, _useConfig.default)();
  const auth = (0, _useAuthContext.default)();
  let customerType = onClient ?
  // This conditional is a constant value based on the environment, so the same path will
  // always be followed., and the "rule of hooks" is not violated.
  // eslint-disable-next-line react-hooks/rules-of-hooks
  (0, _useLocalStorage.default)(`customer_type_${config.siteId}`) : auth.get('customer_type');
  const isGuest = customerType === 'guest';
  const isRegistered = customerType === 'registered';
  if (customerType !== null && customerType !== 'guest' && customerType !== 'registered') {
    customerType = null;
  }
  return {
    customerType,
    isGuest,
    isRegistered
  };
};
var _default = useCustomerType;
exports.default = _default;