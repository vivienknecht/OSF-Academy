"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cacheUpdateMatrix = void 0;
var _queryKeyHelpers = require("../ShopperCustomers/queryKeyHelpers");
var _queryKeyHelpers2 = require("./queryKeyHelpers");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /*
                                                                                                                                                                                                                                                                                                                                                                                           * Copyright (c) 2023, Salesforce, Inc.
                                                                                                                                                                                                                                                                                                                                                                                           * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                           * SPDX-License-Identifier: BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                           * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                           */
/** Parameters that get passed around, includes client config and possible parameters from other endpoints */

const updateOrderQuery = (customerId, {
  parameters
}) => ({
  update: [{
    queryKey: _queryKeyHelpers2.getOrder.queryKey(parameters)
  }]
});
const cacheUpdateMatrix = {
  createOrder(customerId, {
    parameters
  }, response) {
    const {
      orderNo
    } = response;
    const update = !orderNo ? [] : [{
      queryKey: _queryKeyHelpers2.getOrder.queryKey(_objectSpread(_objectSpread({}, parameters), {}, {
        orderNo
      }))
    }];
    const invalidate = !customerId ? [] : [{
      queryKey: _queryKeyHelpers.getCustomerBaskets.queryKey(_objectSpread(_objectSpread({}, parameters), {}, {
        customerId
      }))
    }];
    return {
      update,
      invalidate
    };
  },
  createPaymentInstrumentForOrder: updateOrderQuery,
  updatePaymentInstrumentForOrder: updateOrderQuery,
  removePaymentInstrumentFromOrder: updateOrderQuery
};
exports.cacheUpdateMatrix = cacheUpdateMatrix;