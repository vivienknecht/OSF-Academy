import type { ShopperOrders } from 'commerce-sdk-isomorphic';
import { Argument, ExcludeTail } from '../types';
type Client = ShopperOrders<{
    shortCode: string;
}>;
type Params<T extends keyof QueryKeys> = Partial<Argument<Client[T]>['parameters']>;
export type QueryKeys = {
    getOrder: [
        '/commerce-sdk-react',
        '/organizations/',
        string | undefined,
        '/orders/',
        string | undefined,
        Params<'getOrder'>
    ];
    getPaymentMethodsForOrder: [
        '/commerce-sdk-react',
        '/organizations/',
        string | undefined,
        '/orders/',
        string | undefined,
        '/payment-methods',
        Params<'getPaymentMethodsForOrder'>
    ];
    getTaxesFromOrder: [
        '/commerce-sdk-react',
        '/organizations/',
        string | undefined,
        '/orders/',
        string | undefined,
        '/taxes',
        Params<'getTaxesFromOrder'>
    ];
};
type QueryKeyHelper<T extends keyof QueryKeys> = {
    /**
     * Reduces the given parameters (which may have additional, unknown properties) to an object
     * containing *only* the properties required for an endpoint.
     */
    parameters: (params: Params<T>) => Params<T>;
    /** Generates the path component of the query key for an endpoint. */
    path: (params: Params<T>) => ExcludeTail<QueryKeys[T]>;
    /** Generates the full query key for an endpoint. */
    queryKey: (params: Params<T>) => QueryKeys[T];
};
export declare const getOrder: QueryKeyHelper<'getOrder'>;
export declare const getPaymentMethodsForOrder: QueryKeyHelper<'getPaymentMethodsForOrder'>;
export declare const getTaxesFromOrder: QueryKeyHelper<'getTaxesFromOrder'>;
export {};
//# sourceMappingURL=queryKeyHelpers.d.ts.map