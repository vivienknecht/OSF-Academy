"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectCookiesAvailable = detectCookiesAvailable;
exports.detectLocalStorageAvailable = detectLocalStorageAvailable;
exports.onClient = exports.getDefaultCookieAttributes = exports.getCookieSameSiteAttribute = void 0;
var _jsCookie = _interopRequireDefault(require("js-cookie"));
var _constant = require("./constant");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /*
                                                                                                                                                                                                                                                                                                                                                                                           * Copyright (c) 2023, Salesforce, Inc.
                                                                                                                                                                                                                                                                                                                                                                                           * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                           * SPDX-License-Identifier: BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                           * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                           */
/**
 * Utility to determine if you are on the browser (client) or not.
 */
const onClient = () => typeof window !== 'undefined';

/**
 * Gets the value to use for the `sameSite` cookie attribute.
 * @returns `undefined` if running on the server, `"none"` if running as an iframe on a trusted site
 * (i.e. Storefront Preview), otherwise `"Lax"`
 */
exports.onClient = onClient;
const getCookieSameSiteAttribute = () => {
  var _document$location, _document$location$an;
  if (!onClient()) return;
  // document.location?.ancestorOrigins?.[0] will provide the parent host url, but it only works for Chrome and Safari.
  // Firefox does not have this field. document.referrer is common use for parent url, but it could be less reliable.
  // It is best to use it a fallback option for Firefox
  const parentUrl = ((_document$location = document.location) === null || _document$location === void 0 ? void 0 : (_document$location$an = _document$location.ancestorOrigins) === null || _document$location$an === void 0 ? void 0 : _document$location$an[0]) || document.referrer;
  const parentHostName = parentUrl ? new URL(parentUrl).hostname : '';
  const isParentSiteTrusted = _constant.IFRAME_HOST_ALLOW_LIST.includes(parentHostName);
  const isLocalHost = window.location.hostname === 'localhost';
  return !isLocalHost && isParentSiteTrusted ? 'none' : 'Lax';
};

/**
 * Gets the default cookie attributes. Sets the secure flag unless running on localhost in Safari.
 * Sets the sameSite attribute to `"none"` when running in a trusted iframe.
 */
exports.getCookieSameSiteAttribute = getCookieSameSiteAttribute;
const getDefaultCookieAttributes = () => {
  return {
    // Deployed sites will always be HTTPS, but the local dev server is served over HTTP.
    // Ideally, this would be `secure: true`, because Chrome and Firefox both treat
    // localhost as a Secure context. But Safari doesn't, so here we are.
    secure: !onClient() || window.location.protocol === 'https:',
    // By default, Chrome does not allow cookies to be sent/read when the code is loaded in
    // an iframe (e.g storefront preview). Setting sameSite to "none" loosens that
    // restriction, but we only want to do so when when the iframe parent is in our allow
    // list. Outside of iframe, we want to keep most browser default value (Chrome or Firefox uses Lax)
    // https://web.dev/samesite-cookie-recipes/
    sameSite: getCookieSameSiteAttribute()
  };
};

/**
 * Determines whether local storage is available by trying to set a test value.
 */
exports.getDefaultCookieAttributes = getDefaultCookieAttributes;
function detectLocalStorageAvailable() {
  if (typeof window === 'undefined') return false;
  try {
    // If `localStorage` is not available, simply accessing the property will throw an error
    window.localStorage;
    return true;
  } catch {
    return false;
  }
}

/**
 * Determines whether cookies are available by trying to set a test value.
 */
function detectCookiesAvailable(options) {
  if (typeof document === 'undefined') return false;
  if (!navigator.cookieEnabled) return false;
  // Even if `cookieEnabled` is true, cookies may not work. A site may allow first-party, but not
  // third-party, a browser extension may block cookies, etc. The most reliable way to detect if
  // cookies are available is to try to set one
  const testKey = 'commerce-sdk-react-temp';
  const testValue = '1';
  const netOptions = _objectSpread(_objectSpread({}, getDefaultCookieAttributes()), options);
  try {
    _jsCookie.default.set(testKey, testValue, netOptions);
    const success = _jsCookie.default.get(testKey) === testValue;
    _jsCookie.default.remove(testKey, netOptions);
    return success;
  } catch {
    return false;
  }
}